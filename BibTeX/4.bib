@article{https://doi.org/10.1002/1097-024X(200009)30:11<1167::AID-SPE337>3.0.CO;2-B,
author = {Fabri, Andreas and Giezeman, Geert-Jan and Kettner, Lutz and Schirra, Stefan and Schönherr, Sven},
title = {On the design of CGAL a computational geometry algorithms library},
journal = {Software: Practice and Experience},
volume = {30},
number = {11},
pages = {1167-1202},
keywords = {computational geometry, software library, C++, generic programming},
doi = {https://doi.org/10.1002/1097-024X(200009)30:11<1167::AID-SPE337>3.0.CO;2-B},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/1097-024X%28200009%2930%3A11%3C1167%3A%3AAID-SPE337%3E3.0.CO%3B2-B},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/1097-024X%28200009%2930%3A11%3C1167%3A%3AAID-SPE337%3E3.0.CO%3B2-B},
abstract = {Abstract CGAL is a Computational Geometry Algorithms Library written in C++, which is being developed by research groups in Europe and Israel. The goal is to make the large body of geometric algorithms developed in the field of computational geometry available for industrial application. We discuss the major design goals for CGAL, which are correctness, flexibility, ease-of-use, efficiency, and robustness, and present our approach to reach these goals. Generic programming using templates in C++ plays a central role in the architecture of CGAL. We give a short introduction to generic programming in C++, compare it to the object-oriented programming paradigm, and present examples where both paradigms are used effectively in CGAL. Moreover, we give an overview of the current structure of the CGAL-library and consider software engineering aspects in the CGAL-project. Copyright © 2000 John Wiley \& Sons, Ltd.},
year = {2000}
}
